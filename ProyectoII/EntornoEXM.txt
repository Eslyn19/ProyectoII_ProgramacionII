#pragma once
#include <string>

// Enum for day types
enum class Dia {
    SOLEADO,
    NUBLADO,
    LLUVIOSO,
    TORMENTA,
    NOCHE
};

// Enum for seasons
enum class Temporada {
    PRIMAVERA,
    VERANO,
    OTONO,
    INVIERNO
};

class Ciclo {
private:
    Dia diaActual;
    Temporada temporadaActual;
    
public:
    Ciclo() : diaActual(Dia::SOLEADO), temporadaActual(Temporada::VERANO) {}
    
    void setDia(Dia nuevoDia) { diaActual = nuevoDia; }
    Dia getDia() const { return diaActual; }
    
    void setTemporada(Temporada nuevaTemporada) { temporadaActual = nuevaTemporada; }
    Temporada getTemporada() const { return temporadaActual; }
    
    void avanzarDia() {
        // Logic to transition between day types
    }
};

class Entorno {
private:
    static Entorno* instancia;
    Ciclo cicloClimatico;
    
    // Private constructor for singleton
    Entorno() : cicloClimatico() {}
    
public:
    // Delete copy constructor and assignment
    Entorno(const Entorno&) = delete;
    void operator=(const Entorno&) = delete;
    
    static Entorno* getInstance() {
        if (!instancia) {
            instancia = new Entorno();
        }
        return instancia;
    }
    
    Ciclo& getCiclo() { return cicloClimatico; }
    
    void mostrarEstado() {
        // Implementation to show current environment state
    }
};

// Initialize static member
Entorno* Entorno::instancia = nullptr;s